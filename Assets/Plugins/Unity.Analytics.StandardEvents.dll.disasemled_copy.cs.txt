// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

internal class <Module>
{
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace UnityEngine.Analytics
{
	public static class AnalyticsEvent
	{
		private static readonly string k_SdkVersion = "1.1.1";

		private static Action<IDictionary<string, object>> s_StandardEventCallback = new Action<IDictionary<string, object>>(AnalyticsEvent._s_StandardEventCallback_m__0);

		private static readonly Dictionary<string, object> m_EventData = new Dictionary<string, object>();

		private static bool _debugMode = false;

		private static Dictionary<string, string> enumRenameTable = new Dictionary<string, string>
		{
			{
				"RewardedAd",
				"rewarded_ad"
			},
			{
				"TimedReward",
				"timed_reward"
			},
			{
				"SocialReward",
				"social_reward"
			},
			{
				"MainMenu",
				"main_menu"
			},
			{
				"IAPPromo",
				"iap_promo"
			},
			{
				"CrossPromo",
				"cross_promo"
			},
			{
				"FeaturePromo",
				"feature_promo"
			},
			{
				"TextOnly",
				"text_only"
			}
		};

		public static string sdkVersion
		{
			get
			{
				return AnalyticsEvent.k_SdkVersion;
			}
		}

		public static bool debugMode
		{
			get
			{
				return AnalyticsEvent._debugMode;
			}
			set
			{
				AnalyticsEvent._debugMode = value;
			}
		}

		public static void Register(Action<IDictionary<string, object>> action)
		{
			AnalyticsEvent.s_StandardEventCallback = (Action<IDictionary<string, object>>)Delegate.Combine(AnalyticsEvent.s_StandardEventCallback, action);
		}

		public static void Unregister(Action<IDictionary<string, object>> action)
		{
			AnalyticsEvent.s_StandardEventCallback = (Action<IDictionary<string, object>>)Delegate.Remove(AnalyticsEvent.s_StandardEventCallback, action);
		}

		private static void OnValidationFailed(string message)
		{
			throw new ArgumentException(message);
		}

		private static void AddCustomEventData(IDictionary<string, object> eventData)
		{
			if (eventData == null)
			{
				return;
			}
			foreach (KeyValuePair<string, object> current in eventData)
			{
				if (!AnalyticsEvent.m_EventData.ContainsKey(current.Key))
				{
					AnalyticsEvent.m_EventData.Add(current.Key, current.Value);
				}
			}
		}

		public static AnalyticsResult Custom(string eventName, IDictionary<string, object> eventData = null)
		{
			AnalyticsResult analyticsResult = AnalyticsResult.UnsupportedPlatform;
			string text = string.Empty;
			if (string.IsNullOrEmpty(eventName))
			{
				AnalyticsEvent.OnValidationFailed("Custom event name cannot be set to null or an empty string.");
			}
			if (eventData == null)
			{
				analyticsResult = Analytics.CustomEvent(eventName);
			}
			else
			{
				AnalyticsEvent.s_StandardEventCallback(eventData);
				analyticsResult = Analytics.CustomEvent(eventName, eventData);
			}
			if (AnalyticsEvent.debugMode)
			{
				if (eventData == null)
				{
					text += "\n  Event Data (null)";
				}
				else
				{
					text += string.Format("\n  Event Data ({0} params):", eventData.Count);
					foreach (KeyValuePair<string, object> current in eventData)
					{
						text += string.Format("\n    Key: '{0}';  Value: '{1}'", current.Key, current.Value);
					}
				}
			}
			switch (analyticsResult)
			{
			case AnalyticsResult.Ok:
				if (AnalyticsEvent.debugMode)
				{
					UnityEngine.Debug.LogFormat("Successfully sent '{0}' event (Result: '{1}').{2}", new object[]
					{
						eventName,
						analyticsResult,
						text
					});
				}
				return analyticsResult;
			case AnalyticsResult.NotInitialized:
			case AnalyticsResult.AnalyticsDisabled:
				IL_E4:
				if (analyticsResult != AnalyticsResult.InvalidData)
				{
					UnityEngine.Debug.LogWarningFormat("Unable to send '{0}' event (Result: '{1}').{2}", new object[]
					{
						eventName,
						analyticsResult,
						text
					});
					return analyticsResult;
				}
				goto IL_120;
			case AnalyticsResult.TooManyItems:
				goto IL_120;
			}
			goto IL_E4;
			IL_120:
			UnityEngine.Debug.LogErrorFormat("Failed to send '{0}' event (Result: '{1}').{2}", new object[]
			{
				eventName,
				analyticsResult,
				text
			});
			return analyticsResult;
		}

		public static AnalyticsResult AchievementStep(int stepIndex, string achievementId, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("step_index", stepIndex);
			if (string.IsNullOrEmpty(achievementId))
			{
				throw new ArgumentException(achievementId);
			}
			AnalyticsEvent.m_EventData.Add("achievement_id", achievementId);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("achievement_step", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult AchievementUnlocked(string achievementId, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(achievementId))
			{
				throw new ArgumentException(achievementId);
			}
			AnalyticsEvent.m_EventData.Add("achievement_id", achievementId);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("achievement_unlocked", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult AdComplete(bool rewarded, AdvertisingNetwork network, string placementId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("rewarded", rewarded);
			AnalyticsEvent.m_EventData.Add("network", AnalyticsEvent.RenameEnum(network.ToString()));
			if (!string.IsNullOrEmpty(placementId))
			{
				AnalyticsEvent.m_EventData.Add("placement_id", placementId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("ad_complete", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult AdComplete(bool rewarded, string network = null, string placementId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("rewarded", rewarded);
			if (!string.IsNullOrEmpty(network))
			{
				AnalyticsEvent.m_EventData.Add("network", network);
			}
			if (!string.IsNullOrEmpty(placementId))
			{
				AnalyticsEvent.m_EventData.Add("placement_id", placementId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("ad_complete", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult AdOffer(bool rewarded, AdvertisingNetwork network, string placementId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("rewarded", rewarded);
			AnalyticsEvent.m_EventData.Add("network", AnalyticsEvent.RenameEnum(network.ToString()));
			if (!string.IsNullOrEmpty(placementId))
			{
				AnalyticsEvent.m_EventData.Add("placement_id", placementId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("ad_offer", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult AdOffer(bool rewarded, string network = null, string placementId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("rewarded", rewarded);
			if (!string.IsNullOrEmpty(network))
			{
				AnalyticsEvent.m_EventData.Add("network", network);
			}
			if (!string.IsNullOrEmpty(placementId))
			{
				AnalyticsEvent.m_EventData.Add("placement_id", placementId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("ad_offer", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult AdSkip(bool rewarded, AdvertisingNetwork network, string placementId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("rewarded", rewarded);
			AnalyticsEvent.m_EventData.Add("network", AnalyticsEvent.RenameEnum(network.ToString()));
			if (!string.IsNullOrEmpty(placementId))
			{
				AnalyticsEvent.m_EventData.Add("placement_id", placementId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("ad_skip", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult AdSkip(bool rewarded, string network = null, string placementId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("rewarded", rewarded);
			if (!string.IsNullOrEmpty(network))
			{
				AnalyticsEvent.m_EventData.Add("network", network);
			}
			if (!string.IsNullOrEmpty(placementId))
			{
				AnalyticsEvent.m_EventData.Add("placement_id", placementId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("ad_skip", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult AdStart(bool rewarded, AdvertisingNetwork network, string placementId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("rewarded", rewarded);
			AnalyticsEvent.m_EventData.Add("network", AnalyticsEvent.RenameEnum(network.ToString()));
			if (!string.IsNullOrEmpty(placementId))
			{
				AnalyticsEvent.m_EventData.Add("placement_id", placementId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("ad_start", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult AdStart(bool rewarded, string network = null, string placementId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("rewarded", rewarded);
			if (!string.IsNullOrEmpty(network))
			{
				AnalyticsEvent.m_EventData.Add("network", network);
			}
			if (!string.IsNullOrEmpty(placementId))
			{
				AnalyticsEvent.m_EventData.Add("placement_id", placementId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("ad_start", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult ChatMessageSent(IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("chat_message_sent", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult CustomEvent(IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom(string.Empty, AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult CutsceneSkip(string name, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentException(name);
			}
			AnalyticsEvent.m_EventData.Add("scene_name", name);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("cutscene_skip", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult CutsceneStart(string name, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentException(name);
			}
			AnalyticsEvent.m_EventData.Add("scene_name", name);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("cutscene_start", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult FirstInteraction(string actionId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (!string.IsNullOrEmpty(actionId))
			{
				AnalyticsEvent.m_EventData.Add("action_id", actionId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("first_interaction", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult GameOver(int index, string name = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("level_index", index);
			if (!string.IsNullOrEmpty(name))
			{
				AnalyticsEvent.m_EventData.Add("level_name", name);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("game_over", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult GameOver(string name = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (!string.IsNullOrEmpty(name))
			{
				AnalyticsEvent.m_EventData.Add("level_name", name);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("game_over", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult GameStart(IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("game_start", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult IAPTransaction(string transactionContext, float price, string itemId, string itemType = null, string level = null, string transactionId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(transactionContext))
			{
				throw new ArgumentException(transactionContext);
			}
			AnalyticsEvent.m_EventData.Add("transaction_context", transactionContext);
			AnalyticsEvent.m_EventData.Add("price", price);
			if (string.IsNullOrEmpty(itemId))
			{
				throw new ArgumentException(itemId);
			}
			AnalyticsEvent.m_EventData.Add("item_id", itemId);
			if (!string.IsNullOrEmpty(itemType))
			{
				AnalyticsEvent.m_EventData.Add("item_type", itemType);
			}
			if (!string.IsNullOrEmpty(level))
			{
				AnalyticsEvent.m_EventData.Add("level", level);
			}
			if (!string.IsNullOrEmpty(transactionId))
			{
				AnalyticsEvent.m_EventData.Add("transaction_id", transactionId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("iap_transaction", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult ItemAcquired(AcquisitionType currencyType, string transactionContext, float amount, string itemId, float balance, string itemType = null, string level = null, string transactionId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("currency_type", AnalyticsEvent.RenameEnum(currencyType.ToString()));
			if (string.IsNullOrEmpty(transactionContext))
			{
				throw new ArgumentException(transactionContext);
			}
			AnalyticsEvent.m_EventData.Add("transaction_context", transactionContext);
			AnalyticsEvent.m_EventData.Add("amount", amount);
			if (string.IsNullOrEmpty(itemId))
			{
				throw new ArgumentException(itemId);
			}
			AnalyticsEvent.m_EventData.Add("item_id", itemId);
			AnalyticsEvent.m_EventData.Add("balance", balance);
			if (!string.IsNullOrEmpty(itemType))
			{
				AnalyticsEvent.m_EventData.Add("item_type", itemType);
			}
			if (!string.IsNullOrEmpty(level))
			{
				AnalyticsEvent.m_EventData.Add("level", level);
			}
			if (!string.IsNullOrEmpty(transactionId))
			{
				AnalyticsEvent.m_EventData.Add("transaction_id", transactionId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("item_acquired", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult ItemAcquired(AcquisitionType currencyType, string transactionContext, float amount, string itemId, string itemType = null, string level = null, string transactionId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("currency_type", AnalyticsEvent.RenameEnum(currencyType.ToString()));
			if (string.IsNullOrEmpty(transactionContext))
			{
				throw new ArgumentException(transactionContext);
			}
			AnalyticsEvent.m_EventData.Add("transaction_context", transactionContext);
			AnalyticsEvent.m_EventData.Add("amount", amount);
			if (string.IsNullOrEmpty(itemId))
			{
				throw new ArgumentException(itemId);
			}
			AnalyticsEvent.m_EventData.Add("item_id", itemId);
			if (!string.IsNullOrEmpty(itemType))
			{
				AnalyticsEvent.m_EventData.Add("item_type", itemType);
			}
			if (!string.IsNullOrEmpty(level))
			{
				AnalyticsEvent.m_EventData.Add("level", level);
			}
			if (!string.IsNullOrEmpty(transactionId))
			{
				AnalyticsEvent.m_EventData.Add("transaction_id", transactionId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("item_acquired", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult ItemSpent(AcquisitionType currencyType, string transactionContext, float amount, string itemId, float balance, string itemType = null, string level = null, string transactionId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("currency_type", AnalyticsEvent.RenameEnum(currencyType.ToString()));
			if (string.IsNullOrEmpty(transactionContext))
			{
				throw new ArgumentException(transactionContext);
			}
			AnalyticsEvent.m_EventData.Add("transaction_context", transactionContext);
			AnalyticsEvent.m_EventData.Add("amount", amount);
			if (string.IsNullOrEmpty(itemId))
			{
				throw new ArgumentException(itemId);
			}
			AnalyticsEvent.m_EventData.Add("item_id", itemId);
			AnalyticsEvent.m_EventData.Add("balance", balance);
			if (!string.IsNullOrEmpty(itemType))
			{
				AnalyticsEvent.m_EventData.Add("item_type", itemType);
			}
			if (!string.IsNullOrEmpty(level))
			{
				AnalyticsEvent.m_EventData.Add("level", level);
			}
			if (!string.IsNullOrEmpty(transactionId))
			{
				AnalyticsEvent.m_EventData.Add("transaction_id", transactionId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("item_spent", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult ItemSpent(AcquisitionType currencyType, string transactionContext, float amount, string itemId, string itemType = null, string level = null, string transactionId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("currency_type", AnalyticsEvent.RenameEnum(currencyType.ToString()));
			if (string.IsNullOrEmpty(transactionContext))
			{
				throw new ArgumentException(transactionContext);
			}
			AnalyticsEvent.m_EventData.Add("transaction_context", transactionContext);
			AnalyticsEvent.m_EventData.Add("amount", amount);
			if (string.IsNullOrEmpty(itemId))
			{
				throw new ArgumentException(itemId);
			}
			AnalyticsEvent.m_EventData.Add("item_id", itemId);
			if (!string.IsNullOrEmpty(itemType))
			{
				AnalyticsEvent.m_EventData.Add("item_type", itemType);
			}
			if (!string.IsNullOrEmpty(level))
			{
				AnalyticsEvent.m_EventData.Add("level", level);
			}
			if (!string.IsNullOrEmpty(transactionId))
			{
				AnalyticsEvent.m_EventData.Add("transaction_id", transactionId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("item_spent", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelComplete(string name, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentException(name);
			}
			AnalyticsEvent.m_EventData.Add("level_name", name);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_complete", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelComplete(int index, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("level_index", index);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_complete", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelComplete(string name, int index, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentException(name);
			}
			AnalyticsEvent.m_EventData.Add("level_name", name);
			AnalyticsEvent.m_EventData.Add("level_index", index);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_complete", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelFail(string name, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentException(name);
			}
			AnalyticsEvent.m_EventData.Add("level_name", name);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_fail", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelFail(int index, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("level_index", index);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_fail", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelFail(string name, int index, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentException(name);
			}
			AnalyticsEvent.m_EventData.Add("level_name", name);
			AnalyticsEvent.m_EventData.Add("level_index", index);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_fail", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelQuit(string name, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentException(name);
			}
			AnalyticsEvent.m_EventData.Add("level_name", name);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_quit", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelQuit(int index, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("level_index", index);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_quit", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelQuit(string name, int index, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentException(name);
			}
			AnalyticsEvent.m_EventData.Add("level_name", name);
			AnalyticsEvent.m_EventData.Add("level_index", index);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_quit", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelSkip(string name, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentException(name);
			}
			AnalyticsEvent.m_EventData.Add("level_name", name);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_skip", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelSkip(int index, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("level_index", index);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_skip", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelSkip(string name, int index, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentException(name);
			}
			AnalyticsEvent.m_EventData.Add("level_name", name);
			AnalyticsEvent.m_EventData.Add("level_index", index);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_skip", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelStart(string name, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentException(name);
			}
			AnalyticsEvent.m_EventData.Add("level_name", name);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_start", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelStart(int index, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("level_index", index);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_start", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelStart(string name, int index, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentException(name);
			}
			AnalyticsEvent.m_EventData.Add("level_name", name);
			AnalyticsEvent.m_EventData.Add("level_index", index);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_start", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelUp(string name, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentException(name);
			}
			AnalyticsEvent.m_EventData.Add("new_level_name", name);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_up", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelUp(int index, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("new_level_index", index);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_up", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult LevelUp(string name, int index, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentException(name);
			}
			AnalyticsEvent.m_EventData.Add("new_level_name", name);
			AnalyticsEvent.m_EventData.Add("new_level_index", index);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("level_up", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult PostAdAction(bool rewarded, AdvertisingNetwork network, string placementId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("rewarded", rewarded);
			AnalyticsEvent.m_EventData.Add("network", AnalyticsEvent.RenameEnum(network.ToString()));
			if (!string.IsNullOrEmpty(placementId))
			{
				AnalyticsEvent.m_EventData.Add("placement_id", placementId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("post_ad_action", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult PostAdAction(bool rewarded, string network = null, string placementId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("rewarded", rewarded);
			if (!string.IsNullOrEmpty(network))
			{
				AnalyticsEvent.m_EventData.Add("network", network);
			}
			if (!string.IsNullOrEmpty(placementId))
			{
				AnalyticsEvent.m_EventData.Add("placement_id", placementId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("post_ad_action", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult PushNotificationClick(string message_id, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(message_id))
			{
				throw new ArgumentException(message_id);
			}
			AnalyticsEvent.m_EventData.Add("message_id", message_id);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("push_notification_click", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult PushNotificationEnable(IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("push_notification_enable", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult ScreenVisit(ScreenName screenName, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("screen_name", AnalyticsEvent.RenameEnum(screenName.ToString()));
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("screen_visit", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult ScreenVisit(string screenName, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(screenName))
			{
				throw new ArgumentException(screenName);
			}
			AnalyticsEvent.m_EventData.Add("screen_name", screenName);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("screen_visit", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult SocialShare(ShareType shareType, SocialNetwork socialNetwork, string senderId = null, string recipientId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("share_type", AnalyticsEvent.RenameEnum(shareType.ToString()));
			AnalyticsEvent.m_EventData.Add("social_network", AnalyticsEvent.RenameEnum(socialNetwork.ToString()));
			if (!string.IsNullOrEmpty(senderId))
			{
				AnalyticsEvent.m_EventData.Add("sender_id", senderId);
			}
			if (!string.IsNullOrEmpty(recipientId))
			{
				AnalyticsEvent.m_EventData.Add("recipient_id", recipientId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("social_share", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult SocialShare(ShareType shareType, string socialNetwork, string senderId = null, string recipientId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("share_type", AnalyticsEvent.RenameEnum(shareType.ToString()));
			if (string.IsNullOrEmpty(socialNetwork))
			{
				throw new ArgumentException(socialNetwork);
			}
			AnalyticsEvent.m_EventData.Add("social_network", socialNetwork);
			if (!string.IsNullOrEmpty(senderId))
			{
				AnalyticsEvent.m_EventData.Add("sender_id", senderId);
			}
			if (!string.IsNullOrEmpty(recipientId))
			{
				AnalyticsEvent.m_EventData.Add("recipient_id", recipientId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("social_share", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult SocialShare(string shareType, SocialNetwork socialNetwork, string senderId = null, string recipientId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(shareType))
			{
				throw new ArgumentException(shareType);
			}
			AnalyticsEvent.m_EventData.Add("share_type", shareType);
			AnalyticsEvent.m_EventData.Add("social_network", AnalyticsEvent.RenameEnum(socialNetwork.ToString()));
			if (!string.IsNullOrEmpty(senderId))
			{
				AnalyticsEvent.m_EventData.Add("sender_id", senderId);
			}
			if (!string.IsNullOrEmpty(recipientId))
			{
				AnalyticsEvent.m_EventData.Add("recipient_id", recipientId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("social_share", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult SocialShare(string shareType, string socialNetwork, string senderId = null, string recipientId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(shareType))
			{
				throw new ArgumentException(shareType);
			}
			AnalyticsEvent.m_EventData.Add("share_type", shareType);
			if (string.IsNullOrEmpty(socialNetwork))
			{
				throw new ArgumentException(socialNetwork);
			}
			AnalyticsEvent.m_EventData.Add("social_network", socialNetwork);
			if (!string.IsNullOrEmpty(senderId))
			{
				AnalyticsEvent.m_EventData.Add("sender_id", senderId);
			}
			if (!string.IsNullOrEmpty(recipientId))
			{
				AnalyticsEvent.m_EventData.Add("recipient_id", recipientId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("social_share", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult SocialShareAccept(ShareType shareType, SocialNetwork socialNetwork, string senderId = null, string recipientId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("share_type", AnalyticsEvent.RenameEnum(shareType.ToString()));
			AnalyticsEvent.m_EventData.Add("social_network", AnalyticsEvent.RenameEnum(socialNetwork.ToString()));
			if (!string.IsNullOrEmpty(senderId))
			{
				AnalyticsEvent.m_EventData.Add("sender_id", senderId);
			}
			if (!string.IsNullOrEmpty(recipientId))
			{
				AnalyticsEvent.m_EventData.Add("recipient_id", recipientId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("social_share_accept", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult SocialShareAccept(ShareType shareType, string socialNetwork, string senderId = null, string recipientId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("share_type", AnalyticsEvent.RenameEnum(shareType.ToString()));
			if (string.IsNullOrEmpty(socialNetwork))
			{
				throw new ArgumentException(socialNetwork);
			}
			AnalyticsEvent.m_EventData.Add("social_network", socialNetwork);
			if (!string.IsNullOrEmpty(senderId))
			{
				AnalyticsEvent.m_EventData.Add("sender_id", senderId);
			}
			if (!string.IsNullOrEmpty(recipientId))
			{
				AnalyticsEvent.m_EventData.Add("recipient_id", recipientId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("social_share_accept", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult SocialShareAccept(string shareType, SocialNetwork socialNetwork, string senderId = null, string recipientId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(shareType))
			{
				throw new ArgumentException(shareType);
			}
			AnalyticsEvent.m_EventData.Add("share_type", shareType);
			AnalyticsEvent.m_EventData.Add("social_network", AnalyticsEvent.RenameEnum(socialNetwork.ToString()));
			if (!string.IsNullOrEmpty(senderId))
			{
				AnalyticsEvent.m_EventData.Add("sender_id", senderId);
			}
			if (!string.IsNullOrEmpty(recipientId))
			{
				AnalyticsEvent.m_EventData.Add("recipient_id", recipientId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("social_share_accept", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult SocialShareAccept(string shareType, string socialNetwork, string senderId = null, string recipientId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(shareType))
			{
				throw new ArgumentException(shareType);
			}
			AnalyticsEvent.m_EventData.Add("share_type", shareType);
			if (string.IsNullOrEmpty(socialNetwork))
			{
				throw new ArgumentException(socialNetwork);
			}
			AnalyticsEvent.m_EventData.Add("social_network", socialNetwork);
			if (!string.IsNullOrEmpty(senderId))
			{
				AnalyticsEvent.m_EventData.Add("sender_id", senderId);
			}
			if (!string.IsNullOrEmpty(recipientId))
			{
				AnalyticsEvent.m_EventData.Add("recipient_id", recipientId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("social_share_accept", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult StoreItemClick(StoreType storeType, string itemId, string itemName = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("type", AnalyticsEvent.RenameEnum(storeType.ToString()));
			if (string.IsNullOrEmpty(itemId))
			{
				throw new ArgumentException(itemId);
			}
			AnalyticsEvent.m_EventData.Add("item_id", itemId);
			if (!string.IsNullOrEmpty(itemName))
			{
				AnalyticsEvent.m_EventData.Add("item_name", itemName);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("store_item_click", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult StoreOpened(StoreType storeType, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("type", AnalyticsEvent.RenameEnum(storeType.ToString()));
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("store_opened", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult TutorialComplete(string tutorialId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (!string.IsNullOrEmpty(tutorialId))
			{
				AnalyticsEvent.m_EventData.Add("tutorial_id", tutorialId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("tutorial_complete", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult TutorialSkip(string tutorialId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (!string.IsNullOrEmpty(tutorialId))
			{
				AnalyticsEvent.m_EventData.Add("tutorial_id", tutorialId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("tutorial_skip", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult TutorialStart(string tutorialId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (!string.IsNullOrEmpty(tutorialId))
			{
				AnalyticsEvent.m_EventData.Add("tutorial_id", tutorialId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("tutorial_start", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult TutorialStep(int stepIndex, string tutorialId = null, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("step_index", stepIndex);
			if (!string.IsNullOrEmpty(tutorialId))
			{
				AnalyticsEvent.m_EventData.Add("tutorial_id", tutorialId);
			}
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("tutorial_step", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult UserSignup(AuthorizationNetwork authorizationNetwork, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			AnalyticsEvent.m_EventData.Add("authorization_network", AnalyticsEvent.RenameEnum(authorizationNetwork.ToString()));
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("user_signup", AnalyticsEvent.m_EventData);
		}

		public static AnalyticsResult UserSignup(string authorizationNetwork, IDictionary<string, object> eventData = null)
		{
			AnalyticsEvent.m_EventData.Clear();
			if (string.IsNullOrEmpty(authorizationNetwork))
			{
				throw new ArgumentException(authorizationNetwork);
			}
			AnalyticsEvent.m_EventData.Add("authorization_network", authorizationNetwork);
			AnalyticsEvent.AddCustomEventData(eventData);
			return AnalyticsEvent.Custom("user_signup", AnalyticsEvent.m_EventData);
		}

		private static string RenameEnum(string enumName)
		{
			return (!AnalyticsEvent.enumRenameTable.ContainsKey(enumName)) ? enumName.ToLower() : AnalyticsEvent.enumRenameTable[enumName];
		}

		private static void _s_StandardEventCallback_m__0(IDictionary<string, object> dictionary)
		{
		}
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	public class AnalyticsEventAttribute : Attribute
	{
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[AttributeUsage(AttributeTargets.Struct)]
	public class StandardEventName : AnalyticsEventAttribute
	{
		public string sendName;

		public string path;

		public string tooltip;

		public StandardEventName(string sendName, string path, string tooltip)
		{
			this.sendName = sendName;
			this.path = path;
			this.tooltip = tooltip;
		}
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	public class AnalyticsEventParameter : AnalyticsEventAttribute
	{
		public string sendName;

		public string tooltip;

		public string groupId;

		public AnalyticsEventParameter(string sendName, string tooltip, string groupId = null)
		{
			this.sendName = sendName;
			this.tooltip = tooltip;
			this.groupId = groupId;
		}
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[AttributeUsage(AttributeTargets.Field)]
	public class RequiredParameter : AnalyticsEventParameter
	{
		public RequiredParameter(string sendName, string tooltip, string groupId = null) : base(sendName, tooltip, groupId)
		{
		}
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[AttributeUsage(AttributeTargets.Field)]
	public class OptionalParameter : AnalyticsEventParameter
	{
		public OptionalParameter(string sendName, string tooltip) : base(sendName, tooltip, null)
		{
		}
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[AttributeUsage(AttributeTargets.Field)]
	public class CustomizableEnum : AnalyticsEventAttribute
	{
		public bool Customizable;

		public CustomizableEnum(bool customizable)
		{
			this.Customizable = customizable;
		}
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	public class EnumCase : AnalyticsEventAttribute
	{
		public enum Styles
		{
			None,
			Snake,
			Lower
		}

		public EnumCase.Styles Style;

		public EnumCase(EnumCase.Styles style)
		{
			this.Style = style;
		}
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[EnumCase(EnumCase.Styles.Snake)]
	public enum AcquisitionSource
	{
		None,
		Store,
		Earned,
		Promotion,
		Gift,
		RewardedAd,
		TimedReward,
		SocialReward
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[EnumCase(EnumCase.Styles.Snake)]
	public enum AcquisitionType
	{
		Soft,
		Premium
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[EnumCase(EnumCase.Styles.Lower)]
	public enum AdvertisingNetwork
	{
		None,
		Aarki,
		AdAction,
		AdapTv,
		Adcash,
		AdColony,
		AdMob,
		AerServ,
		Airpush,
		Altrooz,
		Ampush,
		AppleSearch,
		AppLift,
		AppLovin,
		Appnext,
		AppNexus,
		Appoday,
		Appodeal,
		AppsUnion,
		Avazu,
		BlueStacks,
		Chartboost,
		ClickDealer,
		CPAlead,
		CrossChannel,
		CrossInstall,
		Epom,
		Facebook,
		Fetch,
		Fiksu,
		Flurry,
		Fuse,
		Fyber,
		Glispa,
		Google,
		GrowMobile,
		HeyZap,
		HyperMX,
		Iddiction,
		IndexExchange,
		InMobi,
		Instagram,
		Instal,
		Ipsos,
		IronSource,
		Jirbo,
		Kimia,
		Leadbolt,
		Liftoff,
		Manage,
		Matomy,
		MediaBrix,
		MillenialMedia,
		Minimob,
		MobAir,
		MobileCore,
		Mobobeat,
		Mobusi,
		Mobvista,
		MoPub,
		Motive,
		Msales,
		NativeX,
		OpenX,
		Pandora,
		PropellerAds,
		Revmob,
		RubiconProject,
		SiriusAd,
		Smaato,
		SponsorPay,
		SpotXchange,
		StartApp,
		Tapjoy,
		Taptica,
		Tremor,
		TrialPay,
		Twitter,
		UnityAds,
		Vungle,
		Yeahmobi,
		YuMe
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[EnumCase(EnumCase.Styles.Lower)]
	public enum AuthorizationNetwork
	{
		None,
		Internal,
		Facebook,
		Twitter,
		Google,
		GameCenter
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[EnumCase(EnumCase.Styles.Snake)]
	public enum ScreenName
	{
		None,
		MainMenu,
		Settings,
		Map,
		Lose,
		Win,
		Credits,
		Title,
		IAPPromo,
		CrossPromo,
		FeaturePromo,
		Hint,
		Pause,
		Inventory,
		Leaderboard,
		Achievements,
		Lobby
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[EnumCase(EnumCase.Styles.Snake)]
	public enum ShareType
	{
		None,
		TextOnly,
		Image,
		Video,
		Invite,
		Achievement
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[EnumCase(EnumCase.Styles.Lower)]
	public enum SocialNetwork
	{
		None,
		Facebook,
		Twitter,
		Instagram,
		GooglePlus,
		Pinterest,
		WeChat,
		SinaWeibo,
		TencentWeibo,
		QQ,
		Zhihu,
		VK,
		OK_ru
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[EnumCase(EnumCase.Styles.Snake)]
	public enum StoreType
	{
		Soft,
		Premium
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;
using System.Runtime.InteropServices;

namespace UnityEngine.Analytics
{
	[StandardEventName("", "", "An event you define yourself.")]
	[StructLayout(LayoutKind.Sequential, Size = 1)]
	public struct CustomEvent
	{
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("achievement_step", "Engagement", "Send this event when a requirement or step toward completing a multi-part achievement is complete.")]
	public struct AchievementStep
	{
		[RequiredParameter("step_index", "The order of the step.", null)]
		public int stepIndex;

		[RequiredParameter("achievement_id", "A unique id for this achievement.", null)]
		public string achievementId;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("achievement_unlocked", "Engagement", "Send this event when all requirements to unlock an achievement have been met.")]
	public struct AchievementUnlocked
	{
		[RequiredParameter("achievement_id", "A unique id for this achievement.", null)]
		public string achievementId;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("ad_complete", "Monetization", "Send this event when an ad is successfully viewed and not skipped.")]
	public struct AdComplete
	{
		[RequiredParameter("rewarded", "Set to true if a reward is offered for this ad.", null)]
		public bool rewarded;

		[CustomizableEnum(true), OptionalParameter("network", "The ad or mediation network provider.")]
		public AdvertisingNetwork network;

		[OptionalParameter("placement_id", "An ad placement or configuration ID.")]
		public string placementId;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("ad_offer", "Monetization", "Send this event when the player is offered the opportunity to view an ad.")]
	public struct AdOffer
	{
		[RequiredParameter("rewarded", "Set to true if a reward is offered for this ad.", null)]
		public bool rewarded;

		[CustomizableEnum(true), OptionalParameter("network", "The ad or mediation network provider.")]
		public AdvertisingNetwork network;

		[OptionalParameter("placement_id", "An ad placement or configuration ID.")]
		public string placementId;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("ad_skip", "Monetization", "Send this event when the player opts to skip a video ad during video playback.")]
	public struct AdSkip
	{
		[RequiredParameter("rewarded", "Set to true if a reward is offered for this ad.", null)]
		public bool rewarded;

		[CustomizableEnum(true), OptionalParameter("network", "The ad or mediation network provider.")]
		public AdvertisingNetwork network;

		[OptionalParameter("placement_id", "An ad placement or configuration ID.")]
		public string placementId;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("ad_start", "Monetization", "Send this event when playback of an ad begins.")]
	public struct AdStart
	{
		[RequiredParameter("rewarded", "Set to true if a reward is offered for this ad.", null)]
		public bool rewarded;

		[CustomizableEnum(true), OptionalParameter("network", "The ad or mediation network provider.")]
		public AdvertisingNetwork network;

		[OptionalParameter("placement_id", "An ad placement or configuration ID.")]
		public string placementId;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("post_ad_action", "Monetization", "Send this event with the first action a player takes after an ad is shown, or after an ad is offered but not shown.")]
	public struct PostAdAction
	{
		[RequiredParameter("rewarded", "Set to true if a reward is offered for this ad.", null)]
		public bool rewarded;

		[CustomizableEnum(true), OptionalParameter("network", "The ad or mediation network provider.")]
		public AdvertisingNetwork network;

		[OptionalParameter("placement_id", "An ad placement or configuration ID.")]
		public string placementId;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;
using System.Runtime.InteropServices;

namespace UnityEngine.Analytics
{
	[StandardEventName("chat_message_sent", "Engagement", "Send this event when the player sends a chat message in game.")]
	[StructLayout(LayoutKind.Sequential, Size = 1)]
	public struct ChatMessageSent
	{
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("cutscene_start", "Application", "Send this event when the player begins to watch a cutscene or cinematic screen.")]
	public struct CutsceneStart
	{
		[RequiredParameter("scene_name", "The name of the cutscene being viewed.", null)]
		public string name;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("cutscene_skip", "Application", "Send this event when the player opts to skip a cutscene or cinematic screen.")]
	public struct CutsceneSkip
	{
		[RequiredParameter("scene_name", "The name of the cutscene skipped.", null)]
		public string name;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("game_over", "Progression", "Send this event when gameplay ends (in a game with an identifiable conclusion).")]
	public struct GameOver
	{
		[OptionalParameter("level_index", "The order of this level within the game.")]
		public int index;

		[OptionalParameter("level_name", "The level name.")]
		public string name;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;
using System.Runtime.InteropServices;

namespace UnityEngine.Analytics
{
	[StandardEventName("game_start", "Progression", "Send this event when gameplay starts. Usually used only in games with an identifiable conclusion.")]
	[StructLayout(LayoutKind.Sequential, Size = 1)]
	public struct GameStart
	{
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("iap_transaction", "Monetization", "Send this event when the player spends real-world money to make an In-App Purchase.")]
	public struct IAPTransaction
	{
		[RequiredParameter("transaction_context", "In what context (store, gift, reward) was the item acquired?", null)]
		public string transactionContext;

		[RequiredParameter("price", "How much did the item cost?", null)]
		public float price;

		[RequiredParameter("item_id", "A name or unique identifier for the acquired item.", null)]
		public string itemId;

		[OptionalParameter("item_type", "The category of the item that was acquired.")]
		public string itemType;

		[OptionalParameter("level", "The name or id of the level where the item was acquired.")]
		public string level;

		[OptionalParameter("transaction_id", "A unique identifier for the specific transaction that occurred. You can use this to group multiple events into a single transaction.")]
		public string transactionId;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("item_acquired", "Monetization", "Send this event when the player acquires an item within the game.")]
	public struct ItemAcquired
	{
		[RequiredParameter("currency_type", "Set to AcquisitionType.Premium if the item was purchased with real money; otherwise, AcqusitionType.Soft.", null)]
		public AcquisitionType currencyType;

		[RequiredParameter("transaction_context", "In what context(store, gift, reward, crafting) was the item acquired?", null)]
		public string transactionContext;

		[RequiredParameter("amount", "The unit quantity of the item that was acquired", null)]
		public float amount;

		[RequiredParameter("item_id", "A name or unique identifier for the acquired item.", null)]
		public string itemId;

		[OptionalParameter("balance", "The balance of the acquired item.")]
		public float balance;

		[OptionalParameter("item_type", "The category of the item that was acquired.")]
		public string itemType;

		[OptionalParameter("level", "The name or id of the level where the item was acquired.")]
		public string level;

		[OptionalParameter("transaction_id", "A unique identifier for the specific transaction that occurred. You can use this to group multiple events into a single transaction.")]
		public string transactionId;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("item_spent", "Monetization", "Send this event when the player spends an item.")]
	public struct ItemSpent
	{
		[RequiredParameter("currency_type", "Set to AcquisitionType.Premium if the item was purchased with real money; otherwise, AcqusitionType.Soft.", null)]
		public AcquisitionType currencyType;

		[RequiredParameter("transaction_context", "In what context(store, gift, reward, crafting) was the item spent?", null)]
		public string transactionContext;

		[RequiredParameter("amount", "The unit quantity of the item that was spent", null)]
		public float amount;

		[RequiredParameter("item_id", "A name or unique identifier for the spent item.", null)]
		public string itemId;

		[OptionalParameter("balance", "The balance of the spent item.")]
		public float balance;

		[OptionalParameter("item_type", "The category of the item that was spent.")]
		public string itemType;

		[OptionalParameter("level", "The name or id of the level where the item was spent.")]
		public string level;

		[OptionalParameter("transaction_id", "A unique identifier for the specific transaction that occurred. You can use this to group multiple events into a single transaction.")]
		public string transactionId;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("level_complete", "Progression", "Send this event when the player has successfully completed a level.")]
	public struct LevelComplete
	{
		[RequiredParameter("level_name", "The level name. Either level_name or level_index is required.", "level")]
		public string name;

		[RequiredParameter("level_index", "The order of this level within the game. Either level_name or level_index is required.", "level")]
		public int index;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("level_fail", "Progression", "Send this event when the player fails a level.")]
	public struct LevelFail
	{
		[RequiredParameter("level_name", "The level name. Either level_name or level_index is required.", "level")]
		public string name;

		[RequiredParameter("level_index", "The order of this level within the game. Either level_name or level_index is required.", "level")]
		public int index;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("level_quit", "Progression", "Send this event when the player opts to quit from a level before completing it.")]
	public struct LevelQuit
	{
		[RequiredParameter("level_name", "The level name. Either level_name or level_index is required.", "level")]
		public string name;

		[RequiredParameter("level_index", "The order of this level within the game. Either level_name or level_index is required.", "level")]
		public int index;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("level_skip", "Progression", "Send this event when the player opts to skip past a level.")]
	public struct LevelSkip
	{
		[RequiredParameter("level_name", "The level name. Either level_name or level_index is required.", "level")]
		public string name;

		[RequiredParameter("level_index", "The order of this level within the game. Either level_name or level_index is required.", "level")]
		public int index;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("level_start", "Progression", "Send this event when the player enters into or begins a level.")]
	public struct LevelStart
	{
		[RequiredParameter("level_name", "The level name. Either level_name or level_index is required.", "level")]
		public string name;

		[RequiredParameter("level_index", "The order of this level within the game. Either level_name or level_index is required.", "level")]
		public int index;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("level_up", "Progression", "Send this event when the player rank or level increases.")]
	public struct LevelUp
	{
		[RequiredParameter("new_level_name", "The new rank or level name.", "level")]
		public string name;

		[RequiredParameter("new_level_index", "The new rank or level index.", "level")]
		public int index;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("first_interaction", "Onboarding", "Send this event with the first voluntary action the user takes after install.")]
	public struct FirstInteraction
	{
		[OptionalParameter("action_id", "The action ID or name. For example, a unique identifier for the button clicked.")]
		public string actionId;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("push_notification_click", "Engagement", "Send this event when the player responds to a push notification.")]
	public struct PushNotificationClick
	{
		[RequiredParameter("message_id", "The message name or ID.", null)]
		public string message_id;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;
using System.Runtime.InteropServices;

namespace UnityEngine.Analytics
{
	[StandardEventName("push_notification_enable", "Engagement", "Send this event when the player enables or grants permission for the game to use push notifications.")]
	[StructLayout(LayoutKind.Sequential, Size = 1)]
	public struct PushNotificationEnable
	{
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("screen_visit", "Application", "Send this event when the player opens a menu or visits a screen in the game.")]
	public struct ScreenVisit
	{
		[CustomizableEnum(true), RequiredParameter("screen_name", "The name of the screen or type of screen visited.", null)]
		public ScreenName screenName;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("social_share", "Engagement", "Send this event when the player posts a message, gift, or invitation through social media.")]
	public struct SocialShare
	{
		[CustomizableEnum(true), RequiredParameter("share_type", "The mode of sharing, or media type used in the social engagement.", null)]
		public ShareType shareType;

		[CustomizableEnum(true), RequiredParameter("social_network", "The network through which the message is shared.", null)]
		public SocialNetwork socialNetwork;

		[OptionalParameter("sender_id", "A unique identifier for the sender.")]
		public string senderId;

		[OptionalParameter("recipient_id", "A unique identifier for the recipient.")]
		public string recipientId;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("social_share_accept", "Engagement", "Send this event when the player accepts a message, gift, or invitation through social media.")]
	public struct SocialShareAccept
	{
		[CustomizableEnum(true), RequiredParameter("share_type", "The mode of sharing, or media type used in the social engagement.", null)]
		public ShareType shareType;

		[CustomizableEnum(true), RequiredParameter("social_network", "The network through which the message is shared.", null)]
		public SocialNetwork socialNetwork;

		[OptionalParameter("sender_id", "A unique identifier for the sender.")]
		public string senderId;

		[OptionalParameter("recipient_id", "A unique identifier for the recipient.")]
		public string recipientId;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("store_item_click", "Monetization", "Send this event when the player clicks on an item in the store.")]
	public struct StoreItemClick
	{
		[RequiredParameter("type", "Set to StoreType.Premium if purchases use real-world money; otherwise, StoreType.Soft.", null)]
		public StoreType storeType;

		[RequiredParameter("item_id", "A unique identifier for the item.", null)]
		public string itemId;

		[OptionalParameter("item_name", "The item's name.")]
		public string itemName;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("store_opened", "Monetization", "Send this event when the player opens a store in game.")]
	public struct StoreOpened
	{
		[RequiredParameter("type", "Set to StoreType.Premium if purchases use real-world money; otherwise, StoreType.Soft.", null)]
		public StoreType storeType;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("tutorial_complete", "Onboarding", "Send this event when the player completes a tutorial.")]
	public struct TutorialComplete
	{
		[OptionalParameter("tutorial_id", "The tutorial name or ID.")]
		public string tutorialId;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("tutorial_skip", "Onboarding", "Send this event when the player opts to skip a tutorial.")]
	public struct TutorialSkip
	{
		[OptionalParameter("tutorial_id", "The tutorial name or ID.")]
		public string tutorialId;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("tutorial_start", "Onboarding", "Send this event when the player starts a tutorial.")]
	public struct TutorialStart
	{
		[OptionalParameter("tutorial_id", "The tutorial name or ID.")]
		public string tutorialId;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("tutorial_step", "Onboarding", "Send this event when the player completes a step or stage in a multi-part tutorial.")]
	public struct TutorialStep
	{
		[RequiredParameter("step_index", "The step or stage completed in a multi-part tutorial.", null)]
		public int stepIndex;

		[OptionalParameter("tutorial_id", "The tutorial name or ID.")]
		public string tutorialId;
	}
}

// Decompile from assembly: Unity.Analytics.StandardEvents.dll

using System;

namespace UnityEngine.Analytics
{
	[StandardEventName("user_signup", "Engagement", "Send this event when the player registers or logs in for the first time.")]
	public struct UserSignup
	{
		[CustomizableEnum(true), RequiredParameter("authorization_network", "The authorization network or login service provider.", null)]
		public AuthorizationNetwork authorizationNetwork;
	}
}

